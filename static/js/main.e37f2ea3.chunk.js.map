{"version":3,"sources":["store/WorksContext.jsx","components/work-item/work-item.component.jsx","pages/works.component.jsx","components/menuItem/menuItem.component.jsx","components/menu/menu.components.jsx","components/header/header.component.jsx","store/GeneralContext.jsx","pages/page-container.component.jsx","App.js","serviceWorker.js","index.js","store/HomeContext.jsx","store/context.js","store/AboutContext.jsx","client.js"],"names":["WorksContext","createContext","WorksContextProvider","props","useState","works","setWorks","useEffect","worksArray","sanityClient","fetch","then","forEach","work","push","Provider","value","children","builder","imageUrlBuilder","Image","styled","img","WorkItem","source","src","image","url","WorkContainer","div","Works","useContext","id","map","item","key","ItemContainer","Item","Link","HashItem","HashLink","MenuItem","name","to","link","scroll","el","offset","elementPosition","offsetTop","window","top","left","behavior","scrollWithOffset","MenuContainer","Menu","header","HomeContext","console","log","menu","HeaderCont","Header","GeneralContext","GeneralContextProvider","general","setGeneral","Wrapper","PageContainer","style","background","backgroundColor","hex","color","textColor","HomePage","lazy","AboutPage","App","className","fallback","path","exact","AboutContext","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","HomeContextProvider","setHeader","Context","globalState","globalDispatch","AboutContextProvider","about","setabout","projectId","dataset","token","useCdn"],"mappings":"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","file":"static/js/main.e37f2ea3.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect, useContext} from 'react'\nimport sanityClient from '../client'\nimport Context from './context'\nexport const WorksContext = createContext()\n\nconst WorksContextProvider = (props) => {\n    const [works, setWorks] = useState([])\n    useEffect(() => {\n        const worksArray = []\n        const workQuery = `*[_type == \"works\"]`\n        sanityClient.fetch(workQuery).then(works => {\n          works.forEach(work => {\n            worksArray.push(work)\n          })\n          setWorks(worksArray)\n        })\n    }, [])\n   \n    return (\n        <WorksContext.Provider value={{works}}>\n            \n            {props.children}\n            \n        </WorksContext.Provider>\n    )\n}\n\nexport default WorksContextProvider\n","import React from 'react'\nimport styled from 'styled-components'\nimport sanityClient from \"../../client\"\nimport imageUrlBuilder from '@sanity/image-url'\n\nconst builder = imageUrlBuilder(sanityClient)\nfunction urlFor(source) {\n  return builder.image(source)\n}\n\nconst Image = styled.img`\n    width: 80%;\n    height: auto;\n`\nconst WorkItem = ({work}) => {\n\n    return (\n        <Image src={urlFor(work.image).url()} />\n    )\n}\n\nexport default WorkItem\n","import React, {useContext} from 'react'\nimport styled from 'styled-components'\nimport { WorksContext } from '../store/WorksContext'\nimport WorkItem from '../components/work-item/work-item.component'\n\n\nconst WorkContainer = styled.div`\n    width: 100%;\n    height: auto;\n    display: flex;\n    flex-flow: column;\n    justify-content: center;\n    align-items: center;\n`\n\nconst Works = () => {\n    const { works } = useContext(WorksContext)\n    return (\n        <WorkContainer id=\"works\">\n            {\n                works ? works.map((item, id) => \n                <WorkItem key={id} work={item} />) : null\n            }\n        </WorkContainer>\n    )\n}\n\nexport default Works\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { HashLink } from 'react-router-hash-link'\nimport styled from 'styled-components'\n\nconst ItemContainer = styled.div`\n    \n    padding: 5% 0; \n  \n`\n\nconst Item = styled(Link)`\n    position: relative;\n    z-index: 99;\n    pointer-events: auto;\n    font-size: 26px;\n    transform: scale(.6, 1);\n    -webkit-transform: scale(.6, 1); /* Safari and Chrome */\n    -moz-transform: scale(.6, 1); /* Firefox */\n    -ms-transform: scale(.6, 1); /* IE 9+ */\n    -o-transform: scale(.6, 1); /* Opera */\n    text-decoration: none;\n    color: white;\n`\nconst HashItem = styled(HashLink)`\n    position: relative;\n    z-index: 99;\n    pointer-events: auto;\n    font-size: 26px;\n    transform: scale(.6, 1);\n    -webkit-transform: scale(.6, 1); /* Safari and Chrome */\n    -moz-transform: scale(.6, 1); /* Firefox */\n    -ms-transform: scale(.6, 1); /* IE 9+ */\n    -o-transform: scale(.6, 1); /* Opera */\n    text-decoration: none;\n    color: white;\n`\n\n\nconst MenuItem = ({item}) => {\nconst scrollWithOffset = (el, offset) => {\n    const elementPosition = el.offsetTop - offset\n    window.scroll({\n      top: elementPosition,\n      left: 0,\n      behavior: \"smooth\"\n    })}\n  \n    return (\n        <ItemContainer>\n            {item.name !== 'WORKS' ? \n             <Item to={item.link}>{item.name}</Item>\n            :<HashItem scroll={el => scrollWithOffset(el, 85)} to={`/#${item.link}`}>{item.name}</HashItem>\n            }\n           \n        </ItemContainer>\n       \n    )\n}\n\nexport default MenuItem\n","import React, {useContext} from 'react'\nimport MenuItem from '../menuItem/menuItem.component'\nimport styled from 'styled-components'\nimport { HomeContext } from '../../store/HomeContext'\n\nconst MenuContainer = styled.div`\n\n    display: flex;\n    width: 100%;\n    justify-content: center;\n    height: auto;\n    writing-mode: vertical-rl;\n    -webkit-transform:rotate(180deg);\n    -moz-transform:rotate(180deg);\n    -o-transform: rotate(180deg);\n    -ms-transform:rotate(180deg);\n    transform: rotate(180deg);\n`\nconst Menu = () => {\n    const { header } = useContext(HomeContext)\n    console.log(header)\n    return (\n        <MenuContainer>\n               {header ? header.menu.map((item, id) => \n               <MenuItem key={id} item={item} /> )\n               : null }\n        </MenuContainer>\n    )\n}\n\nexport default Menu\n\n","import React from 'react'\nimport styled from 'styled-components'\nimport Menu from '../menu/menu.components'\nconst HeaderCont = styled.div`\n    position: fixed;\n    width: 100%;\n    height: 100vh;\n    top: 0;\n    left: 0;\n    pointer-events: none;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst Header = (props) => {\n    return (\n        <HeaderCont>\n            <Menu/>\n        </HeaderCont>\n    )\n}\n\nexport default Header\n\n","import React, { createContext, useState, useEffect} from 'react'\nimport sanityClient from '../client'\nexport const GeneralContext = createContext()\n\nconst GeneralContextProvider = (props) => {\n    const [general, setGeneral] = useState('')\n    useEffect(() => {\n        const generalQuery = `*[_type == \"general\"]`\n        sanityClient.fetch(generalQuery).then(general => {\n          general.forEach(general => {\n            setGeneral(general)\n          })\n        })\n    }, [])\n   \n    return (\n        <GeneralContext.Provider value={{general}}>\n            \n            {props.children}\n            \n        </GeneralContext.Provider>\n    )\n}\n\nexport default GeneralContextProvider\n","import React, {useContext} from 'react'\nimport styled from 'styled-components'\nimport { GeneralContext } from '../store/GeneralContext'\n\nconst Wrapper = styled.div`\n    width: 100%;\n    min-height: 100vh;\n    height: auto;\n    position: relative;\n    z-index: 1;\n`\n\nconst PageContainer = (props) => {\n    const { general } = useContext(GeneralContext)\n    return (\n        <Wrapper style={general ? {background: `${general.backgroundColor.hex}`, color: `${general.textColor.hex}`}: null}>\n            {props.children}\n        </Wrapper>\n    )\n}\n\nexport default PageContainer\n","import React, { lazy, Suspense} from 'react'\nimport { Route, Switch} from 'react-router-dom'\nimport './App.css'\nimport Works from './pages/works.component'\nimport WorksContextProvider from './store/WorksContext'\nimport Header from './components/header/header.component'\nimport HomeContextProvider from './store/HomeContext'\nimport GeneralContextProvider from './store/GeneralContext'\nimport PageContainer from './pages/page-container.component'\nimport AboutContextProvider from './store/AboutContext';\n\n\n\nconst HomePage = lazy(() => import('./pages/home.component'))\nconst AboutPage = lazy(() => import('./pages/about.component'))\nfunction App() {\n \n  return (\n  \n       <div className=\"App\">\n           <GeneralContextProvider>\n             <PageContainer>\n              <HomeContextProvider>\n                <Header/>\n                <Switch>\n                <Suspense fallback={<div>Loadding</div>}>\n                  <Route path={'/'} exact>\n                    <HomePage/>\n                    <WorksContextProvider>\n                      <Works/>\n                    </WorksContextProvider>\n                  </Route>\n                  <AboutContextProvider>\n                  <Route path={'/about'} component={AboutPage}/>\n                  </AboutContextProvider>\n                 \n                </Suspense>\n                </Switch>\n              \n              </HomeContextProvider>\n             \n             </PageContainer>\n           </GeneralContextProvider> \n        </div>\n\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { createContext, useState, useEffect, useContext} from 'react'\nimport sanityClient from '../client'\nimport Context from './context'\nexport const HomeContext = createContext()\n\nconst HomeContextProvider = (props) => {\n    const [header, setHeader] = useState('')\n    const {globalState, globalDispatch} = useContext(Context)\n    useEffect(() => {\n        const headerQuery = `*[_type == \"header\"]`\n        sanityClient.fetch(headerQuery).then(header => {\n          header.forEach(header => {\n            setHeader(header)\n          })\n        })\n    }, [])\n   \n    return (\n        <HomeContext.Provider value={{header}}>\n            \n            {props.children}\n            \n        </HomeContext.Provider>\n    )\n}\n\nexport default HomeContextProvider\n","import { createContext } from \"react\"\n\nconst Context = createContext({\n\n})\n\nexport default Context","import React, { createContext, useState, useEffect} from 'react'\nimport sanityClient from '../client'\nexport const AboutContext = createContext()\n\nconst AboutContextProvider = (props) => {\n    const [about, setabout] = useState('')\n    useEffect(() => {\n        const aboutQuery = `*[_type == \"about\"]`\n        sanityClient.fetch(aboutQuery).then(about => {\n          about.forEach(about => {\n            setabout(about)\n          })\n        })\n    }, [])\n   \n    return (\n        <AboutContext.Provider value={{about}}>\n            \n            {props.children}\n            \n        </AboutContext.Provider>\n    )\n}\n\nexport default AboutContextProvider","import sanityClient from '@sanity/client'\n\nexport default sanityClient({\n  projectId: '955qdoql',\n  dataset: 'production',\n  token: '', // or leave blank to be anonymous user\n  useCdn: true // `false` if you want to ensure fresh data\n})\n"],"sourceRoot":""}