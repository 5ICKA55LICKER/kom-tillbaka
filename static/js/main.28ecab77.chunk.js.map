{"version":3,"sources":["components/menuItem/menuItem.component.jsx","client.js","store/context.js","store/HomeContext.jsx","components/menu/menu.components.jsx","components/header/header.component.jsx","components/logo/logo.component.jsx","pages/home.component.jsx","store/GeneralContext.jsx","pages/page-container.component.jsx","store/WorksContext.jsx","components/work-item/work-item.component.jsx","pages/works.component.jsx","App.js","serviceWorker.js","index.js"],"names":["ItemContainer","styled","div","Item","p","MenuItem","item","name","sanityClient","projectId","dataset","token","useCdn","Context","createContext","HomeContext","HomeContextProvider","props","useState","header","setHeader","useContext","globalState","globalDispatch","useEffect","fetch","then","forEach","Provider","value","children","MenuContainer","Menu","console","log","menu","map","id","key","HeaderCont","Header","builder","imageUrlBuilder","LogoImg","img","Logo","source","src","logo","image","url","alt","HomeSection","Home","GeneralContext","GeneralContextProvider","general","setGeneral","Wrapper","PageContainer","style","background","backgroundColor","hex","color","textColor","WorksContext","WorksContextProvider","works","setWorks","worksArray","work","push","Image","WorkItem","WorkContainer","Works","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qlBAGA,IAAMA,EAAgBC,IAAOC,IAAV,KAKbC,EAAOF,IAAOG,EAAV,KAmBKC,EATE,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACf,OACI,kBAACN,EAAD,KACI,kBAACG,EAAD,KAAOG,EAAKC,Q,eCnBTC,E,MAAAA,GAAa,CAC1BC,UAAW,WACXC,QAAS,aACTC,MAAO,GACPC,QAAQ,ICAKC,EAJCC,wBAAc,ICCjBC,EAAcD,0BAuBZE,EArBa,SAACC,GAAW,IAAD,EACPC,mBAAS,IADF,mBAC5BC,EAD4B,KACpBC,EADoB,OAEGC,qBAAWR,GAFd,EAE5BS,YAF4B,EAEfC,eAUpB,OATAC,qBAAU,WAENhB,EAAaiB,MADI,wBACeC,MAAK,SAAAP,GACnCA,EAAOQ,SAAQ,SAAAR,GACbC,EAAUD,WAGf,IAGC,kBAACJ,EAAYa,SAAb,CAAsBC,MAAO,CAACV,WAEzBF,EAAMa,W,iXCfnB,IAAMC,EAAgB9B,IAAOC,IAAV,KAyBJ8B,EAZF,WAAO,IACRb,EAAWE,qBAAWN,GAAtBI,OAER,OADAc,QAAQC,IAAIf,GAER,kBAACY,EAAD,KACQZ,EAASA,EAAOgB,KAAKC,KAAI,SAAC9B,EAAM+B,GAAP,OAC1B,kBAAC,EAAD,CAAUC,IAAKD,EAAI/B,KAAMA,OACvB,O,4PCtBjB,IAAMiC,EAAatC,IAAOC,IAAV,KAoBDsC,EARA,SAACvB,GACZ,OACI,kBAACsB,EAAD,KACI,kBAAC,EAAD,Q,4HCXZ,IAAME,EAAUC,IAAgBlC,GAIhC,IAAMmC,EAAU1C,IAAO2C,IAAV,KAWEC,EAPF,WAAO,IAPJC,EAQJ3B,EAAWE,qBAAWN,GAAtBI,OACR,OACI,kBAACwB,EAAD,CAASI,KAVDD,EAUa3B,EAAO6B,KAT3BP,EAAQQ,MAAMH,IASmBI,MAAOC,IAAI,kB,yLCdrD,IAAMC,EAAcnD,IAAOC,IAAV,KAgBFmD,EARF,WACT,OACI,kBAACD,EAAD,KACI,kBAAC,EAAD,QCbCE,EAAiBxC,0BAsBfyC,EApBgB,SAACtC,GAAW,IAAD,EACRC,mBAAS,IADD,mBAC/BsC,EAD+B,KACtBC,EADsB,KAWtC,OATAjC,qBAAU,WAENhB,EAAaiB,MADK,yBACeC,MAAK,SAAA8B,GACpCA,EAAQ7B,SAAQ,SAAA6B,GACdC,EAAWD,WAGhB,IAGC,kBAACF,EAAe1B,SAAhB,CAAyBC,MAAO,CAAC2B,YAE5BvC,EAAMa,W,4GCdnB,IAAM4B,EAAUzD,IAAOC,IAAV,KAcEyD,EATO,SAAC1C,GAAW,IACtBuC,EAAYnC,qBAAWiC,GAAvBE,QACR,OACI,kBAACE,EAAD,CAASE,MAAOJ,EAAU,CAACK,WAAW,GAAD,OAAKL,EAAQM,gBAAgBC,KAAOC,MAAM,GAAD,OAAKR,EAAQS,UAAUF,MAAQ,MACxG9C,EAAMa,WCVNoC,EAAepD,0BAwBbqD,EAtBc,SAAClD,GAAW,IAAD,EACVC,mBAAS,IADC,mBAC7BkD,EAD6B,KACtBC,EADsB,KAapC,OAXA7C,qBAAU,WACN,IAAM8C,EAAa,GAEnB9D,EAAaiB,MADE,uBACeC,MAAK,SAAA0C,GACjCA,EAAMzC,SAAQ,SAAA4C,GACZD,EAAWE,KAAKD,MAElBF,EAASC,QAEZ,IAGC,kBAACJ,EAAatC,SAAd,CAAuBC,MAAO,CAACuC,UAE1BnD,EAAMa,W,2GChBnB,IAAMW,EAAUC,IAAgBlC,GAKhC,IAAMiE,EAAQxE,IAAO2C,IAAV,KAWI8B,EAPE,SAAC,GAAY,IARd5B,EAQGyB,EAAU,EAAVA,KAEf,OADAtC,QAAQC,IAAIqC,EAAKtB,OAEb,kBAACwB,EAAD,CAAO1B,KAXCD,EAWWyB,EAAKtB,MAVvBR,EAAQQ,MAAMH,IAUgBI,S,gNCXvC,IAAMyB,EAAgB1E,IAAOC,IAAV,KAqBJ0E,EAZD,WAAO,IACTR,EAAU/C,qBAAW6C,GAArBE,MACR,OACI,kBAACO,EAAD,KAEQP,EAAQA,EAAMhC,KAAI,SAAC9B,EAAM+B,GAAP,OAClB,kBAAC,EAAD,CAAUC,IAAKD,EAAIkC,KAAMjE,OAAY,OCUtCuE,MAtBf,WAEE,OAEK,yBAAKC,UAAU,OACX,kBAAC,EAAD,KACE,kBAAC,EAAD,KACC,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,KACE,kBAAC,EAAD,WCTIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjE,MAAK,SAAAkE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,a","file":"static/js/main.28ecab77.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst ItemContainer = styled.div`\n    \n    padding: 5% 0; \n`\n\nconst Item = styled.p`\n    font-size: 26px;\n    transform: scale(.6, 1);\n    -webkit-transform: scale(.6, 1); /* Safari and Chrome */\n    -moz-transform: scale(.6, 1); /* Firefox */\n    -ms-transform: scale(.6, 1); /* IE 9+ */\n    -o-transform: scale(.6, 1); /* Opera */\n`\n\n\nconst MenuItem = ({item}) => {\n    return (\n        <ItemContainer>\n            <Item>{item.name}</Item>\n        </ItemContainer>\n       \n    )\n}\n\nexport default MenuItem\n","import sanityClient from '@sanity/client'\n\nexport default sanityClient({\n  projectId: '955qdoql',\n  dataset: 'production',\n  token: '', // or leave blank to be anonymous user\n  useCdn: true // `false` if you want to ensure fresh data\n})\n","import { createContext } from \"react\"\n\nconst Context = createContext({\n\n})\n\nexport default Context","import React, { createContext, useState, useEffect, useContext} from 'react'\nimport sanityClient from '../client'\nimport Context from './context'\nexport const HomeContext = createContext()\n\nconst HomeContextProvider = (props) => {\n    const [header, setHeader] = useState('')\n    const {globalState, globalDispatch} = useContext(Context)\n    useEffect(() => {\n        const headerQuery = `*[_type == \"header\"]`\n        sanityClient.fetch(headerQuery).then(header => {\n          header.forEach(header => {\n            setHeader(header)\n          })\n        })\n    }, [])\n   \n    return (\n        <HomeContext.Provider value={{header}}>\n            \n            {props.children}\n            \n        </HomeContext.Provider>\n    )\n}\n\nexport default HomeContextProvider\n","import React, {useContext} from 'react'\nimport MenuItem from '../menuItem/menuItem.component'\nimport styled from 'styled-components'\nimport { HomeContext } from '../../store/HomeContext'\n\nconst MenuContainer = styled.div`\n\n    display: flex;\n    width: 100%;\n    justify-content: center;\n    height: auto;\n    writing-mode: vertical-rl;\n    -webkit-transform:rotate(180deg);\n    -moz-transform:rotate(180deg);\n    -o-transform: rotate(180deg);\n    -ms-transform:rotate(180deg);\n    transform: rotate(180deg);\n`\nconst Menu = () => {\n    const { header } = useContext(HomeContext)\n    console.log(header)\n    return (\n        <MenuContainer>\n               {header ? header.menu.map((item, id) => \n               <MenuItem key={id} item={item} /> )\n               : null }\n        </MenuContainer>\n    )\n}\n\nexport default Menu\n\n","import React from 'react'\nimport styled from 'styled-components'\nimport Menu from '../menu/menu.components'\nconst HeaderCont = styled.div`\n    position: fixed;\n    width: 100%;\n    height: 100vh;\n    top: 0;\n    left: 0;\n    z-index: 99;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst Header = (props) => {\n    return (\n        <HeaderCont>\n            <Menu/>\n        </HeaderCont>\n    )\n}\n\nexport default Header\n\n","import React, {useContext} from 'react'\nimport sanityClient from \"../../client\"\nimport imageUrlBuilder from '@sanity/image-url'\nimport styled from 'styled-components'\nimport { HomeContext } from '../../store/HomeContext'\n\n\nconst builder = imageUrlBuilder(sanityClient)\nfunction urlFor(source) {\n  return builder.image(source)\n}\nconst LogoImg = styled.img`\n    width: 90%;\n    height: auto;\n`\nconst Logo = () => {\n    const { header } = useContext(HomeContext)\n    return (\n        <LogoImg src={urlFor(header.logo).url()} alt=\"kom tillbaka\"/>\n    )\n}\n\nexport default Logo\n\n","import React from 'react'\nimport Logo from '../components/logo/logo.component'\nimport styled from 'styled-components'\n\nconst HomeSection = styled.div`\n    width: 100%;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst Home = () => {\n    return (\n        <HomeSection>\n            <Logo />\n        </HomeSection>\n    )\n}\n\nexport default Home\n","import React, { createContext, useState, useEffect} from 'react'\nimport sanityClient from '../client'\nexport const GeneralContext = createContext()\n\nconst GeneralContextProvider = (props) => {\n    const [general, setGeneral] = useState('')\n    useEffect(() => {\n        const generalQuery = `*[_type == \"general\"]`\n        sanityClient.fetch(generalQuery).then(general => {\n          general.forEach(general => {\n            setGeneral(general)\n          })\n        })\n    }, [])\n   \n    return (\n        <GeneralContext.Provider value={{general}}>\n            \n            {props.children}\n            \n        </GeneralContext.Provider>\n    )\n}\n\nexport default GeneralContextProvider\n","import React, {useContext} from 'react'\nimport styled from 'styled-components'\nimport { GeneralContext } from '../store/GeneralContext'\n\nconst Wrapper = styled.div`\n    width: 100%;\n    height: auto;\n`\n\nconst PageContainer = (props) => {\n    const { general } = useContext(GeneralContext)\n    return (\n        <Wrapper style={general ? {background: `${general.backgroundColor.hex}`, color: `${general.textColor.hex}`}: null}>\n            {props.children}\n        </Wrapper>\n    )\n}\n\nexport default PageContainer\n","import React, { createContext, useState, useEffect, useContext} from 'react'\nimport sanityClient from '../client'\nimport Context from './context'\nexport const WorksContext = createContext()\n\nconst WorksContextProvider = (props) => {\n    const [works, setWorks] = useState([])\n    useEffect(() => {\n        const worksArray = []\n        const workQuery = `*[_type == \"works\"]`\n        sanityClient.fetch(workQuery).then(works => {\n          works.forEach(work => {\n            worksArray.push(work)\n          })\n          setWorks(worksArray)\n        })\n    }, [])\n   \n    return (\n        <WorksContext.Provider value={{works}}>\n            \n            {props.children}\n            \n        </WorksContext.Provider>\n    )\n}\n\nexport default WorksContextProvider\n","import React from 'react'\nimport styled from 'styled-components'\nimport sanityClient from \"../../client\"\nimport imageUrlBuilder from '@sanity/image-url'\n\nconst builder = imageUrlBuilder(sanityClient)\nfunction urlFor(source) {\n  return builder.image(source)\n}\n\nconst Image = styled.img`\n    width: 80%;\n    height: auto;\n`\nconst WorkItem = ({work}) => {\n    console.log(work.image)\n    return (\n        <Image src={urlFor(work.image).url()} />\n    )\n}\n\nexport default WorkItem\n","import React, {useContext} from 'react'\nimport styled from 'styled-components'\nimport { WorksContext } from '../store/WorksContext'\nimport WorkItem from '../components/work-item/work-item.component'\n\n\nconst WorkContainer = styled.div`\n    width: 100%;\n    height: auto;\n    display: flex;\n    flex-flow: column;\n    justify-content: center;\n    align-items: center;\n`\n\nconst Works = () => {\n    const { works } = useContext(WorksContext)\n    return (\n        <WorkContainer>\n            {\n                works ? works.map((item, id) => \n                <WorkItem key={id} work={item} />) : null\n            }\n        </WorkContainer>\n    )\n}\n\nexport default Works\n","import React from 'react'\nimport './App.css'\nimport Header from './components/header/header.component'\nimport Home from './pages/home.component'\nimport HomeContextProvider from './store/HomeContext'\nimport GeneralContextProvider from './store/GeneralContext'\nimport PageContainer from './pages/page-container.component'\nimport WorksContextProvider from './store/WorksContext'\nimport Works from './pages/works.component'\nfunction App() {\n\n  return (\n  \n       <div className=\"App\">\n           <GeneralContextProvider>\n             <PageContainer>\n              <HomeContextProvider>\n                <Header/>\n                <Home/>\n              </HomeContextProvider>\n              <WorksContextProvider>\n                <Works/>\n              </WorksContextProvider>\n             </PageContainer>\n           </GeneralContextProvider> \n        </div>\n\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}